{"version":3,"file":"getRequestInfo.js","sources":["../../../../../src/integrations/http/vendor/getRequestInfo.ts"],"sourcesContent":["/* eslint-disable complexity */\n\n/**\n * Vendored in from https://github.com/open-telemetry/opentelemetry-js/commit/87bd98edd24c98a5fbb9a56fed4b673b7f17a724\n */\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport type { RequestOptions } from 'node:http';\nimport * as url from 'url';\nimport type { DiagLogger } from '@opentelemetry/api';\n\n/**\n * Makes sure options is an url object\n * return an object with default value and parsed options\n * @param logger component logger\n * @param options original options for the request\n * @param [extraOptions] additional options for the request\n */\nexport const getRequestInfo = (\n  logger: DiagLogger,\n  options: url.URL | RequestOptions | string,\n  extraOptions?: RequestOptions,\n): {\n  origin: string;\n  pathname: string;\n  method: string;\n  invalidUrl: boolean;\n  optionsParsed: RequestOptions;\n} => {\n  let pathname: string;\n  let origin: string;\n  let optionsParsed: RequestOptions;\n  let invalidUrl = false;\n  if (typeof options === 'string') {\n    try {\n      const convertedOptions = stringUrlToHttpOptions(options);\n      optionsParsed = convertedOptions;\n      pathname = convertedOptions.pathname || '/';\n    } catch (e) {\n      invalidUrl = true;\n      logger.verbose(\n        'Unable to parse URL provided to HTTP request, using fallback to determine path. Original error:',\n        e,\n      );\n      // for backward compatibility with how url.parse() behaved.\n      optionsParsed = {\n        path: options,\n      };\n      pathname = optionsParsed.path || '/';\n    }\n\n    origin = `${optionsParsed.protocol || 'http:'}//${optionsParsed.host}`;\n    if (extraOptions !== undefined) {\n      Object.assign(optionsParsed, extraOptions);\n    }\n  } else if (options instanceof url.URL) {\n    optionsParsed = {\n      protocol: options.protocol,\n      hostname:\n        typeof options.hostname === 'string' && options.hostname.startsWith('[')\n          ? options.hostname.slice(1, -1)\n          : options.hostname,\n      path: `${options.pathname || ''}${options.search || ''}`,\n    };\n    if (options.port !== '') {\n      optionsParsed.port = Number(options.port);\n    }\n    if (options.username || options.password) {\n      optionsParsed.auth = `${options.username}:${options.password}`;\n    }\n    pathname = options.pathname;\n    origin = options.origin;\n    if (extraOptions !== undefined) {\n      Object.assign(optionsParsed, extraOptions);\n    }\n  } else {\n    optionsParsed = Object.assign({ protocol: options.host ? 'http:' : undefined }, options);\n\n    const hostname =\n      optionsParsed.host ||\n      (optionsParsed.port != null ? `${optionsParsed.hostname}${optionsParsed.port}` : optionsParsed.hostname);\n    origin = `${optionsParsed.protocol || 'http:'}//${hostname}`;\n\n    pathname = (options as url.URL).pathname;\n    if (!pathname && optionsParsed.path) {\n      try {\n        const parsedUrl = new URL(optionsParsed.path, origin);\n        pathname = parsedUrl.pathname || '/';\n      } catch (e) {\n        pathname = '/';\n      }\n    }\n  }\n\n  // some packages return method in lowercase..\n  // ensure upperCase for consistency\n  const method = optionsParsed.method ? optionsParsed.method.toUpperCase() : 'GET';\n\n  return { origin, pathname, method, optionsParsed, invalidUrl };\n};\n\n/**\n * Mimics Node.js conversion of URL strings to RequestOptions expected by\n * `http.request` and `https.request` APIs.\n *\n * See https://github.com/nodejs/node/blob/2505e217bba05fc581b572c685c5cf280a16c5a3/lib/internal/url.js#L1415-L1437\n *\n * @param stringUrl\n * @throws TypeError if the URL is not valid.\n */\nfunction stringUrlToHttpOptions(stringUrl: string): RequestOptions & { pathname: string } {\n  // This is heavily inspired by Node.js handling of the same situation, trying\n  // to follow it as closely as possible while keeping in mind that we only\n  // deal with string URLs, not URL objects.\n  const { hostname, pathname, port, username, password, search, protocol, hash, href, origin, host } = new URL(\n    stringUrl,\n  );\n\n  const options: RequestOptions & {\n    pathname: string;\n    hash: string;\n    search: string;\n    href: string;\n    origin: string;\n  } = {\n    protocol: protocol,\n    hostname: hostname && hostname[0] === '[' ? hostname.slice(1, -1) : hostname,\n    hash: hash,\n    search: search,\n    pathname: pathname,\n    path: `${pathname || ''}${search || ''}`,\n    href: href,\n    origin: origin,\n    host: host,\n  };\n  if (port !== '') {\n    options.port = Number(port);\n  }\n  if (username || password) {\n    options.auth = `${decodeURIComponent(username)}:${decodeURIComponent(password)}`;\n  }\n  return options;\n}\n"],"names":[],"mappings":"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"}